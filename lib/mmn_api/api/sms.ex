# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule MmnApi.Api.Sms do
  @moduledoc """
  API calls for all endpoints tagged `Sms`.
  """

  alias MmnApi.Connection
  import MmnApi.RequestBuilder


  @doc """
  Mobile Number Opt-In Status Check
  Returns a recipient consent state. A successful call to the API will return one of the following possible strings:  * **OPT_IN_REQUESTED** means an invite has been sent to the phone number. MMN is waiting for an opt-in message (e.g., JOIN MMNS) from the phone. The phone number will not be able to receive any message at this point  * **OPTED_IN** means the phone number has been successfully opt-ed in and will receive future SMS messages  * **OPTED_OUT** means the phone number has explicitly opt-ed out of the messaging service  * **NOT_SET** means the MMN system has no record of this number.

  ## Parameters

  - connection (MmnApi.Connection): Connection to server
  - addr (String): The mobile number to check the opt-in status of, with area code and optionally the country code (eg. &#x60;6135550100&#x60; or &#x60;16135550100&#x60;).   If no country code is supplied, 1 is assumed for US/Canada.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec get_recipient_consent_state(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def get_recipient_consent_state(connection, addr, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/contact/consent")
    |> add_param(:query, :"addr", addr)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Receive inbound mobile originated SMS messages (MO)
  WARNING: This call is intended for M2M (machine to machine). Please do not use for opt-in, an invite API is available for that purpose.

  ## Parameters

  - connection (MmnApi.Connection): Connection to server
  - body (MoSmsMessage): mobile originated (MO) SMS message
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec process_incoming_sms(Tesla.Env.client, MmnApi.Model.MoSmsMessage.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def process_incoming_sms(connection, body, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/inbound/sms")
    |> add_param(:body, :"body", body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Receive inbound mobile originated SMS messages (MO) from Twilio
  WARNING: This call is intended for M2M (machine to machine). Used only when a Twilio account is configured as the SMS provider. Conforms to https://www.twilio.com/docs/api/twiml/sms/twilio_request.

  ## Parameters

  - connection (MmnApi.Connection): Connection to server
  - message_sid (String): unique identifier for the message
  - account_sid (String): id of the Account this message is associated with
  - from (String): The phone number that sent this message
  - to (String): The phone number of the recipient
  - opts (KeywordList): [optional] Optional parameters
    - :messaging_service_sid (String): id of the Messaging Service associated to the message
    - :body (String): The text body of the message. Up to 1600 characters long.

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec process_incoming_twilio_sms(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def process_incoming_twilio_sms(connection, message_sid, account_sid, from, to, opts \\ []) do
    optional_params = %{
      :"MessagingServiceSid" => :form,
      :"Body" => :form
    }
    %{}
    |> method(:post)
    |> url("/inbound/twilio")
    |> add_param(:form, :"MessageSid", message_sid)
    |> add_param(:form, :"AccountSid", account_sid)
    |> add_param(:form, :"From", from)
    |> add_param(:form, :"To", to)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  [INTERNAL] Send a message using the MMN backend (without use of a broadcast)
  This call is intended for internal use only, and can be changed or removed without notice.  Successful 

  ## Parameters

  - connection (MmnApi.Connection): Connection to server
  - body (SimpleMessage): a simple message object
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec send_message(Tesla.Env.client, MmnApi.Model.SimpleMessage.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def send_message(connection, body, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/message")
    |> add_param(:body, :"body", body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Send an SMS opt-in invitation
  # SMS Opt-In  This API call allows you to initiate opt-in of a mobile number to receive SMS messages from BlazeCast. The following steps are taken by MMN after receiving the opt-in invitation request:  1. Send an opt-in confirmation request message to the requested mobile number  1. Wait for mobile number to reply back affirmatively to join this program. During this time the mobile number is in &#x60;\&quot;OPT_IN_REQUESTED\&quot;&#x60; status, and cannot receive SMS sent from MMN  1. Once opt-in confirmation message is received from the mobile number, the mobile number is marked as status &#x60;\&quot;OPTED_IN\&quot;&#x60;, and can now start receiving SMS from MMN    For specific SMS message content, and more detail about opt-in process and SMS sending regulations in general, please refer to the **Mitel Mass Notification Customer SMS Provisioning** document.  

  ## Parameters

  - connection (MmnApi.Connection): Connection to server
  - addr (String): phone number to invite. Mobile number with area code and optionally the country code (eg. &#x60;6135550100&#x60; or &#x60;16135550100&#x60;).   If no country code is supplied, 1 is assumed for US/Canada.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec send_sms_opt_in_invitation(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def send_sms_opt_in_invitation(connection, addr, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/message/sms/invite")
    |> add_param(:query, :"addr", addr)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end
end
