# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule MmnApi.Api.System do
  @moduledoc """
  API calls for all endpoints tagged `System`.
  """

  alias MmnApi.Connection
  import MmnApi.RequestBuilder


  @doc """
  Delete a System Setting
  Super administrator privileges are required for this call.

  ## Parameters

  - connection (MmnApi.Connection): Connection to server
  - key (String): the setting key
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec delete_setting(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def delete_setting(connection, key, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/system/setting/#{key}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Get MMN version and build information
  

  ## Parameters

  - connection (MmnApi.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %MmnApi.Model.Version{}} on success
  {:error, info} on failure
  """
  @spec get_about(Tesla.Env.client, keyword()) :: {:ok, MmnApi.Model.Version.t} | {:error, Tesla.Env.t}
  def get_about(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/system/about")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%MmnApi.Model.Version{})
  end

  @doc """
  Return JSON representation of blackout periods for number of days from &#39;start&#39;
  When no parameters are given, returns blackout schedule for 7 days, starting with today.  An interval is a pair [Integer,Integer], start time and end time, in minutes of the day. For example, &#x60;[390, 1080]&#x60; represents an interval starting at &#x60;6:30&#x60; (because 390 &#x3D; 6\\*60 + 30), and ending at &#x60;18:00 (6:00PM)&#x60; (because 1080 &#x3D; 18\\*60).

  ## Parameters

  - connection (MmnApi.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :start (String): start date (YYYY-MM-DD)
    - :days (Integer): number of days including start

  ## Returns

  {:ok, %MmnApi.Model.String{}} on success
  {:error, info} on failure
  """
  @spec get_blackout(Tesla.Env.client, keyword()) :: {:ok, String.t} | {:error, Tesla.Env.t}
  def get_blackout(connection, opts \\ []) do
    optional_params = %{
      :"start" => :query,
      :"days" => :query
    }
    %{}
    |> method(:get)
    |> url("/system/blackout")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Get a set of enabled broadcast options
  

  ## Parameters

  - connection (MmnApi.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, [%String{}, ...]} on success
  {:error, info} on failure
  """
  @spec get_broadcast_options(Tesla.Env.client, keyword()) :: {:ok, list(String.t)} | {:error, Tesla.Env.t}
  def get_broadcast_options(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/system/broadcastoptions")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode([])
  end

  @doc """
  Get an Advanced Settings configuration value using the key
  Super administrator privileges are required for this call.

  ## Parameters

  - connection (MmnApi.Connection): Connection to server
  - key (String): the configuration key
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %MmnApi.Model.String{}} on success
  {:error, info} on failure
  """
  @spec get_config(Tesla.Env.client, String.t, keyword()) :: {:ok, String.t} | {:error, Tesla.Env.t}
  def get_config(connection, key, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/system/config/#{key}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Get a set of enabled broadcast mediums
  

  ## Parameters

  - connection (MmnApi.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, [%String{}, ...]} on success
  {:error, info} on failure
  """
  @spec get_mediums(Tesla.Env.client, keyword()) :: {:ok, list(String.t)} | {:error, Tesla.Env.t}
  def get_mediums(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/system/mediums")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode([])
  end

  @doc """
  Ping the server
  This call simply returns \&quot;OK\&quot;.

  ## Parameters

  - connection (MmnApi.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec get_ping(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def get_ping(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/system/ping")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Get a System Setting value
  

  ## Parameters

  - connection (MmnApi.Connection): Connection to server
  - key (String): the setting key
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %MmnApi.Model.String{}} on success
  {:error, info} on failure
  """
  @spec get_setting(Tesla.Env.client, String.t, keyword()) :: {:ok, String.t} | {:error, Tesla.Env.t}
  def get_setting(connection, key, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/system/setting/#{key}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  [INTERNAL] Log the incoming request
  This method simply logs the incoming request. Used internally for troubleshooting.

  ## Parameters

  - connection (MmnApi.Connection): Connection to server
  - subpath (String): 
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec log_get_request(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def log_get_request(connection, subpath, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/system/log/#{subpath}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  [INTERNAL] Log the incoming request
  This method simply logs the incoming request. Used internally for troubleshooting.

  ## Parameters

  - connection (MmnApi.Connection): Connection to server
  - subpath (String): 
  - opts (KeywordList): [optional] Optional parameters
    - :body (String): 

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec log_post_request(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def log_post_request(connection, subpath, opts \\ []) do
    optional_params = %{
      :"body" => :body
    }
    %{}
    |> method(:post)
    |> url("/system/log/#{subpath}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Put a setting using a key
  

  ## Parameters

  - connection (MmnApi.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :body (SettingForm): 

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec put_setting(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def put_setting(connection, opts \\ []) do
    optional_params = %{
      :"body" => :body
    }
    %{}
    |> method(:post)
    |> url("/system/setting")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end
end
