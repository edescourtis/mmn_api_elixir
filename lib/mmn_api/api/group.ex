# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule MmnApi.Api.Group do
  @moduledoc """
  API calls for all endpoints tagged `Group`.
  """

  alias MmnApi.Connection
  import MmnApi.RequestBuilder


  @doc """
  Delete a group. Group members are not deleted.
  Only contact groups can be deleted in current implementation.

  ## Parameters

  - connection (MmnApi.Connection): Connection to server
  - gid (Integer): The group identifier
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec delete_group(Tesla.Env.client, Integer.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def delete_group(connection, gid, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/groups/#{gid}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Get a group by id
  

  ## Parameters

  - connection (MmnApi.Connection): Connection to server
  - gid (Integer): The group identifier
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %MmnApi.Model.Group{}} on success
  {:error, info} on failure
  """
  @spec get_group(Tesla.Env.client, Integer.t, keyword()) :: {:ok, MmnApi.Model.Group.t} | {:error, Tesla.Env.t}
  def get_group(connection, gid, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/groups/#{gid}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%MmnApi.Model.Group{})
  end

  @doc """
  Get a list of groups
  Group members are not returned in this call. Use the API \&quot;Get the group by id\&quot; to see members.

  ## Parameters

  - connection (MmnApi.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :type (List[String]): Optional, the type of groups to include in the returned list. Each type should be specified in its own type parameter.   If no type parameter is provided, all group types will be returned.

  ## Returns

  {:ok, [%Group{}, ...]} on success
  {:error, info} on failure
  """
  @spec get_group_set(Tesla.Env.client, keyword()) :: {:ok, list(MmnApi.Model.Group.t)} | {:error, Tesla.Env.t}
  def get_group_set(connection, opts \\ []) do
    optional_params = %{
      :"type" => :query
    }
    %{}
    |> method(:get)
    |> url("/groups")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode([%MmnApi.Model.Group{}])
  end

  @doc """
  Get groups of a contact
  Returns a list of group names (titles)

  ## Parameters

  - connection (MmnApi.Connection): Connection to server
  - cid (Integer): The contact identifier
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, [%String{}, ...]} on success
  {:error, info} on failure
  """
  @spec get_groups_of_contact(Tesla.Env.client, Integer.t, keyword()) :: {:ok, list(String.t)} | {:error, Tesla.Env.t}
  def get_groups_of_contact(connection, cid, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/contact/#{cid}/groups")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode([])
  end

  @doc """
  Update groups of a contact
  Group names (titles) are not case sensitive. If a group does not exist in the system, it will be created. Returns actual group names after the update.

  ## Parameters

  - connection (MmnApi.Connection): Connection to server
  - cid (Integer): The contact identifier
  - body (List[String]): List of group names. The contact will be member of these (and only these) contact groups.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, [%String{}, ...]} on success
  {:error, info} on failure
  """
  @spec update_groups_of_contact(Tesla.Env.client, Integer.t, list(String.t), keyword()) :: {:ok, list(String.t)} | {:error, Tesla.Env.t}
  def update_groups_of_contact(connection, cid, body, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/contact/#{cid}/groups")
    |> add_param(:body, :"body", body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode([])
  end
end
