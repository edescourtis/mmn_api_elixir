# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule MmnApi.Api.Contact do
  @moduledoc """
  API calls for all endpoints tagged `Contact`.
  """

  alias MmnApi.Connection
  import MmnApi.RequestBuilder


  @doc """
  Create a contact
  Returns an internal id of the created contact.   Note: It is not recommended to persist internal contact ID in a 3rd party system. Instead, store the field \&quot;uniqueId\&quot;, and later use API \&quot;Get contact by uniqueId\&quot; to retrieve the contact.

  ## Parameters

  - connection (MmnApi.Connection): Connection to server
  - body (Contact): A contact template object
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec create_contact(Tesla.Env.client, MmnApi.Model.Contact.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def create_contact(connection, body, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/contact")
    |> add_param(:body, :"body", body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Delete a contact by contact id
  

  ## Parameters

  - connection (MmnApi.Connection): Connection to server
  - cid (Integer): The contact identifier
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec delete_contact(Tesla.Env.client, Integer.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def delete_contact(connection, cid, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/contact/#{cid}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Get a contact by contact id
  Returns a contact

  ## Parameters

  - connection (MmnApi.Connection): Connection to server
  - cid (Integer): The contact identifier
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %MmnApi.Model.Contact{}} on success
  {:error, info} on failure
  """
  @spec get_contact(Tesla.Env.client, Integer.t, keyword()) :: {:ok, MmnApi.Model.Contact.t} | {:error, Tesla.Env.t}
  def get_contact(connection, cid, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/contact/#{cid}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%MmnApi.Model.Contact{})
  end

  @doc """
  Get contact by uniqueId
  We recommend that external systems rely on uniqueId instead of internal indentifier: Use this API call to retrieve contact details, including internal identifier. Use internal id for subsequent calls during the same session, but do not store it in an external system.

  ## Parameters

  - connection (MmnApi.Connection): Connection to server
  - uid (String): unique identifer of the contact
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %MmnApi.Model.Contact{}} on success
  {:error, info} on failure
  """
  @spec get_contact_by_uid(Tesla.Env.client, String.t, keyword()) :: {:ok, MmnApi.Model.Contact.t} | {:error, Tesla.Env.t}
  def get_contact_by_uid(connection, uid, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/contact")
    |> add_param(:query, :"uid", uid)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%MmnApi.Model.Contact{})
  end

  @doc """
  Get groups of a contact
  Returns a list of group names (titles)

  ## Parameters

  - connection (MmnApi.Connection): Connection to server
  - cid (Integer): The contact identifier
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, [%String{}, ...]} on success
  {:error, info} on failure
  """
  @spec get_groups_of_contact(Tesla.Env.client, Integer.t, keyword()) :: {:ok, list(String.t)} | {:error, Tesla.Env.t}
  def get_groups_of_contact(connection, cid, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/contact/#{cid}/groups")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode([])
  end

  @doc """
  Update a contact by contact id
  

  ## Parameters

  - connection (MmnApi.Connection): Connection to server
  - cid (Integer): The contact identifier
  - body (Contact): A contact template with updated values
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec update_contact(Tesla.Env.client, Integer.t, MmnApi.Model.Contact.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def update_contact(connection, cid, body, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/contact/#{cid}")
    |> add_param(:body, :"body", body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Update groups of a contact
  Group names (titles) are not case sensitive. If a group does not exist in the system, it will be created. Returns actual group names after the update.

  ## Parameters

  - connection (MmnApi.Connection): Connection to server
  - cid (Integer): The contact identifier
  - body (List[String]): List of group names. The contact will be member of these (and only these) contact groups.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, [%String{}, ...]} on success
  {:error, info} on failure
  """
  @spec update_groups_of_contact(Tesla.Env.client, Integer.t, list(String.t), keyword()) :: {:ok, list(String.t)} | {:error, Tesla.Env.t}
  def update_groups_of_contact(connection, cid, body, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/contact/#{cid}/groups")
    |> add_param(:body, :"body", body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode([])
  end
end
